// Fun√ß√£o para criar e mostrar uma notifica√ß√£o no canto superior direito
function showPageNotification(message) {
    // Criar elemento de notifica√ß√£o
    const notification = document.createElement('div');
    
    // Estilizar a notifica√ß√£o
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.backgroundColor = '#4CAF50';
    notification.style.color = 'white';
    notification.style.padding = '12px 20px';
    notification.style.borderRadius = '8px';
    notification.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
    notification.style.zIndex = '9999';
    notification.style.opacity = '0';
    notification.style.transition = 'opacity 0.3s ease-in-out';
    notification.style.fontFamily = 'Arial, sans-serif';
    notification.style.fontSize = '14px';
    notification.style.fontWeight = 'bold';
    notification.style.display = 'flex';
    notification.style.alignItems = 'center';
    notification.style.justifyContent = 'center';
    
    // √çcone para a notifica√ß√£o
    const icon = document.createElement('div');
    icon.innerHTML = 'üìÑ';
    icon.style.marginRight = '10px';
    icon.style.fontSize = '18px';
    
    // Texto da notifica√ß√£o
    const text = document.createElement('div');
    text.textContent = message;
    
    // Montar a notifica√ß√£o
    notification.appendChild(icon);
    notification.appendChild(text);
    
    // Adicionar ao corpo do documento
    document.body.appendChild(notification);
    
    // Exibir a notifica√ß√£o com anima√ß√£o
    setTimeout(() => {
        notification.style.opacity = '1';
    }, 100);
    
    // Remover ap√≥s 3 segundos
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// Fun√ß√£o para clicar no bot√£o de pr√≥xima p√°gina
function clickNextPageButton() {
    // Obter informa√ß√£o da p√°gina atual
    const pageInfoElement = document.querySelector('div.sc-dicizt.jpZPHL span.sc-jRsXiD.jyuMzT');
    const pageText = pageInfoElement ? pageInfoElement.textContent : 'desconhecido';
    
    // Mostrar notifica√ß√£o com a p√°gina atual
    showPageNotification(`Avan√ßando: P√°gina ${pageText}`);
    
    // Tentar v√°rios seletores poss√≠veis para o bot√£o "pr√≥xima p√°gina"
    const nextPageSelectors = [
        // Bot√£o no caminho XPath fornecido anteriormente
        "/html/body/div[7]/main/div[2]/div[3]/button/span",
        // Bot√µes comuns de "pr√≥ximo" ou "avan√ßar"
        "button.next-page", 
        "button.next", 
        "a.next-page", 
        "a.next",
        // Bot√£o que pode conter texto como "Pr√≥ximo" ou "Avan√ßar" ou seta
        "button:contains('Pr√≥ximo')", 
        "button:contains('Avan√ßar')",
        "button:contains('‚Üí')",
        // Outros seletores comuns
        ".pagination-next", 
        ".page-next",
        // √öltimo bot√£o em uma navega√ß√£o de pagina√ß√£o
        ".pagination button:last-child",
        ".pagination a:last-child"
    ];
    
    // Tentar encontrar o bot√£o usando os seletores
    let buttonFound = false;
    
    // Tentar primeiro com seletores CSS
    for (const selector of nextPageSelectors) {
        if (selector.startsWith("/")) {
            // √â um XPath
            const button = document.evaluate(
                selector,
                document,
                null,
                XPathResult.FIRST_ORDERED_NODE_TYPE,
                null
            ).singleNodeValue;
            
            if (button) {
                button.click();
                buttonFound = true;
                console.log("Clicado no bot√£o usando XPath:", selector);
                break;
            }
        } else {
            // √â um seletor CSS
            try {
                const button = document.querySelector(selector);
                if (button) {
                    button.click();
                    buttonFound = true;
                    console.log("Clicado no bot√£o usando seletor:", selector);
                    break;
                }
            } catch (e) {
                // Alguns seletores personalizados como :contains podem n√£o ser suportados
                console.log("Erro ao tentar seletor:", selector, e);
            }
        }
    }
    
    // Tentar encontrar por texto ou √≠cone se nenhum seletor funcionou
    if (!buttonFound) {
        const allButtons = document.querySelectorAll('button, a.button, input[type="button"], input[type="submit"]');
        for (const button of allButtons) {
            const buttonText = button.textContent.toLowerCase();
            if (buttonText.includes('pr√≥ximo') || buttonText.includes('pr√≥xima') || 
                buttonText.includes('avan√ßar') || buttonText.includes('next') ||
                buttonText.includes('‚Üí') || buttonText.includes('>')) {
                button.click();
                buttonFound = true;
                console.log("Clicado no bot√£o pelo texto:", buttonText);
                break;
            }
        }
    }
    
    if (!buttonFound) {
        showPageNotification("N√£o foi poss√≠vel encontrar o bot√£o de pr√≥xima p√°gina");
        console.error("N√£o foi poss√≠vel encontrar nenhum bot√£o de pr√≥xima p√°gina");
    }
}

// Executar a fun√ß√£o para clicar e mostrar a notifica√ß√£o
clickNextPageButton();

// Configurar para avan√ßar automaticamente a cada 3 segundos
const intervalId = setInterval(clickNextPageButton, 3000);

// Para parar o script (adicionar no console quando quiser parar):
// clearInterval(intervalId);

console.log("Script de pagina√ß√£o autom√°tica iniciado. Execute clearInterval(intervalId) para parar.");